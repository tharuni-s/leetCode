
def trap(height):
    n = len(height)
    
    left_max = [0] * n
    right_max = [0] * n
    
    left_max[0] = height[0]
    for i in range(1, n):
        left_max[i] = max(left_max[i-1], height[i])
    
    right_max[n-1] = height[n-1]
    for i in range(n-2, -1, -1):
        right_max[i] = max(right_max[i+1], height[i])
    
    trapped_water = 0
    for i in range(n):
        trapped_water += min(left_max[i], right_max[i]) - height[i]
    
    return trapped_water

# Input reading
n = int(input())
height = list(map(int, input().split()))

# Output calculation and printing
result = trap(height)
print(result)

=======================================================================


class Solution {
    public int trap(int[] height) {
        int ans=0;
        int l=0;
        int leftMax=0;
        int rightMax=0;a
        int r= height.length-1;
        while(l<r){
            if(height[l]<=height[r]){
                if(height[l]>=leftMax){
                    leftMax = height[l];
                }else{
                    ans+=leftMax-height[l];
                }
                l++;
            }else{
                if(height[r]>=rightMax){
                    rightMax = height[r];
                }else{
                    ans+=rightMax-height[r];
                }
                r--;
            }
        }
        return ans;
    }
}
