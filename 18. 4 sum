Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 =============================================================================


 class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Set<List<Integer>> s = new HashSet<>();
        int  n=nums.length;
        Arrays.sort(nums);
        for(int i=0;i<n-3;i++){
            for(int j=i+1;j<n-2;j++){
                for(int k=j+1;k<n-1;k++){
                    for(int l=k+1;l<n;l++){
                        if((nums[i]+nums[j]+nums[k]+nums[l])==target){
                            List<Integer> ll=new ArrayList<Integer>();
                            ll.add(nums[i]);
                            ll.add(nums[j]);
                            ll.add(nums[k]);
                            ll.add(nums[l]);
                            s.add(ll);
                        }
                    }
                }
            }
        }
        List<List<Integer>> output = new ArrayList<>();
        for(List i : s){
            output.add(i);
        }
        return output;
    }
}


time limit exceeded
