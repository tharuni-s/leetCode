Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
===========================================

class Solution {
    public int maxProfit(int[] arr) {
        int max = 0;
        for(int i=0;i<arr.length-1;i++){
            for(int j=i+1;j<arr.length;j++){
                if((arr[j]-arr[i])>max){
                    max = arr[j]-arr[i];
                }
            }
        }
        return max;
    }
}

=======================================================

class Solution {
    public int maxProfit(int[] prices) {
        int buyPrice = prices[0];
        int profit = 0;
        for(int i=0;i<prices.length;i++){
            if(prices[i]<buyPrice){
                buyPrice = prices[i];
            }
            profit = Math.max(profit,prices[i]-buyPrice);
        }
        return profit;
    }
}
===================================================


Approach
Simply, when we find low price of stock, we should buy it so that we can get maximum profit in a later day.

Input: prices = [7,1,5,3,6,4]
Initialize

buy_price = 7
profit = 0

7 is the first price in input array
We start from index 1.

[7,1,5,3,6,4]
   p

buy_price = 7
profit = 0
We find price 1. Let's think about whether we should update buy_price or not.

As I told you, we should buy the stock when we find low price because there is possiblity that we can get maximum profit in a later day.

Caculation of profit is very simple

profit = current price - buy price
At day 1, we find price 1, so we should buy it at day 1. Update buy_price with price 1

buy_price = 1
Then calclate profit.

profit = max(profit, current price - buy price)
0 = max(0, 1 - 1)
Next, I'll speed up.

[7,1,5,3,6,4]
     p

buy_price = 1
profit = 0
Update buy_price? → No, because previous buy_price is lower than current price.

Calculate profit.

profit = max(0, 5 - 1)
= 4
Next,

[7,1,5,3,6,4]
       p

buy_price = 1
profit = 4
Update buy_price? → No
Calculate profit.

profit = max(4, 3 - 1)
= 4
Next,

[7,1,5,3,6,4]
         p

buy_price = 1
profit = 4
Update buy_price? → No
Calculate profit.

profit = max(4, 6 - 1)
= 5
Next,

[7,1,5,3,6,4]
           p

buy_price = 1
profit = 5
Update buy_price? → No
Calculate profit.

profit = max(5, 4 - 1)
= 5
Finish iteration.
